import os
import telebot
from dotenv import load_dotenv
import random
import psycopg2
from telebot import types, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from PIL import Image


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

db_name = os.getenv('DB_NAME')
db_user = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')
db_host = os.getenv('DB_HOST')
db_port = os.getenv('DB_PORT')

print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = os.getenv('TOKEN')
bot = telebot.TeleBot(token_bot, state_storage=state_storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
try:
    conn = psycopg2.connect(
        dbname=db_name,
        user=db_user,
        password=db_password,
        host=db_host,
        port=db_port
    )
    cursor = conn.cursor()

    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL: {e}")
    exit(1)

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
image_path = os.getenv("img")
if image_path:
    try:
        image = Image.open(image_path)
        image.save("converted_image.png", "PNG")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
else:
    print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è img –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
    exit(1)

# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
with conn.cursor() as cur:
    cur.execute("""
    DROP TABLE IF EXISTS user_words, words, users
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL  PRIMARY KEY,
        user_id    INTEGER UNIQUE NOT NULL,
        username   VARCHAR(255)   NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)

    # –û–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
    cur.execute("""
        CREATE TABLE IF NOT EXISTS words (
            id SERIAL      PRIMARY KEY,
            target_word    VARCHAR(255) UNIQUE NOT NULL,
            translate_word VARCHAR(255) NOT NULL
        )
        """)

    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    cur.execute("""
    CREATE TABLE IF NOT EXISTS user_words (
        id SERIAL      PRIMARY KEY,
        user_id        INTEGER      NOT NULL REFERENCES users (user_id),
        target_word    VARCHAR(255) NOT NULL,
        translate_word VARCHAR(255) NOT NULL,
        UNIQUE (user_id, target_word)
    )
    """)

    conn.commit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ensure_user_exists(user_id, username):
    cursor.execute("""
    INSERT INTO users (user_id, username)
    VALUES (%s, %s)
    ON CONFLICT (user_id) DO NOTHING
    """, (user_id, username))
    conn.commit()


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è'


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    other_words = State()
    adding_new_word = State()
    saving_new_word = State()
    deleting_word = State()


# –û–±—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
common_words = [
    ('Peace', '–ú–∏—Ä'), ('Green', '–ó–µ–ª—ë–Ω—ã–π'), ('White', '–ë–µ–ª—ã–π'),
    ('Hello', '–ü—Ä–∏–≤–µ—Ç'), ('Car', '–ú–∞—à–∏–Ω–∞'), ('Sky', '–ù–µ–±–æ'),
    ('Tree', '–î–µ—Ä–µ–≤–æ'), ('Book', '–ö–Ω–∏–≥–∞'), ('Love', '–õ—é–±–æ–≤—å'),
    ('Friend', '–î—Ä—É–≥')
]

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
cursor.executemany("""
INSERT INTO words (target_word, translate_word)
SELECT %s, %s 
 WHERE NOT EXISTS (
    SELECT 1 
      FROM words 
     WHERE target_word = %s 
       AND translate_word = %s
)
""", [(w[0], w[1], w[0], w[1]) for w in common_words])
conn.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start', 'cards'])
def send_welcome(message):
    cid = message.chat.id
    username = message.chat.username or "Unknown"
    ensure_user_exists(cid, username)

    print("Starting bot for the first time...")

    try:
        sti = open("converted_image.png", 'rb')
        bot.send_sticker(cid, sti)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}")

    bot.send_message(cid, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!\n–Ø {bot.get_me().first_name}! "
                          f"–ù–∞—á–Ω—ë–º —É—á–∏—Ç—å —è–∑—ã–∫ üá¨üáß\n–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä,\n–∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
                          f"–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
                          f"- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\n"
                          f"- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô\n"
                          f"–ü—Ä–∏—Å—Ç—É–ø–∏–º ‚¨áÔ∏è", parse_mode='html'
                     )

    create_cards(message)


def create_cards(message):
    cid = message.chat.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    cursor.execute("""
        SELECT target_word, translate_word 
          FROM words
         WHERE NOT EXISTS (
               SELECT 1 
                 FROM user_words 
                WHERE user_words.user_id = %s 
                  AND words.target_word = user_words.target_word
        )
      ORDER BY RANDOM() 
         LIMIT 1
        """, (cid,))
    word = cursor.fetchone()
    print(f"–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ: {word}")

    if not word:
        bot.send_message(cid, "–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã!\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'.")
        print("–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã.")
        return

    target_word, translate_word = word

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot.set_state(user_id=message.from_user.id, chat_id=message.chat.id, state=MyStates.target_word)
    current_state = bot.get_state(user_id=message.from_user.id, chat_id=message.chat.id)
    print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    with bot.retrieve_data(user_id=message.from_user.id, chat_id=message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word
        if 'target_word' not in data or 'translate_word' not in data:
            print("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
            return

    retrieved_state = bot.get_state(user_id=message.from_user.id, chat_id=message.chat.id)
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {retrieved_state}")

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    cursor.execute("""
        SELECT target_word 
          FROM words 
         WHERE target_word != %s 
      ORDER BY RANDOM() 
         LIMIT 3
        """, (target_word,))
    other_words = [w[0] for w in cursor.fetchall()]
    options = other_words + [target_word]
    random.shuffle(options)

    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [types.KeyboardButton(option) for option in options]
    buttons.append(types.KeyboardButton(Command.NEXT))
    buttons.append(types.KeyboardButton(Command.ADD_WORD))
    buttons.append(types.KeyboardButton(Command.DELETE_WORD))
    markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate_word}"
    bot.send_message(cid, greeting, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_word(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_start(message):
    cid = message.chat.id
    bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.adding_new_word)
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")


@bot.message_handler(state=MyStates.adding_new_word)
def add_translate_word(message):
    cid = message.chat.id
    word = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if not word:
        bot.send_message(cid, "–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ.")
        return

    with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
        data['target_word'] = word

    bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.saving_new_word)
    bot.send_message(cid, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{word}':")


@bot.message_handler(state=MyStates.saving_new_word)
def save_new_word(message):
    cid = message.chat.id
    translation = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not translation:
        bot.send_message(cid, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
            target_word = data.get('target_word').capitalize()

        if not target_word:
            bot.send_message(cid, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Å /start.")
            bot.delete_state(user_id=message.from_user.id, chat_id=cid)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        cursor.execute("""
        INSERT INTO user_words (user_id, target_word, translate_word)
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id, target_word) DO NOTHING
        """, (message.from_user.id, target_word, translation))
        conn.commit()

        bot.send_message(cid, f"–°–ª–æ–≤–æ '{target_word}' –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ '{translation}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.")
    finally:
        bot.delete_state(user_id=message.from_user.id, chat_id=cid)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word_start(message):
    cid = message.chat.id

    bot.set_state(user_id=message.from_user.id, chat_id=message.chat.id, state=MyStates.deleting_word)
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è:")


@bot.message_handler(state=MyStates.deleting_word)
def delete_word(message):
    cid = message.chat.id
    word_to_delete = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    cursor.execute("""
        SELECT 1
          FROM user_words
         WHERE user_id = %s
           AND target_word = %s
    """, (cid, word_to_delete))
    exists = cursor.fetchone()

    if not exists:
        bot.send_message(cid, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ
    cursor.execute("""
        DELETE FROM user_words
         WHERE user_id = %s
           AND target_word = %s
    """, (cid, word_to_delete))
    conn.commit()

    bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!")
    bot.delete_state(user_id=message.from_user.id, chat_id=message.chat.id)
    send_main_menu(cid)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.NEXT)
    ]
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    user_response = message.text
    print(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = bot.get_state(user_id=message.from_user.id, chat_id=message.chat.id)
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —á–∞—Ç {message.chat.id}: {state}")

    if state != MyStates.target_word.name:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get('target_word')
        translate_word = data.get('translate_word')
        print(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π: target_word={target_word}, translate_word={translate_word}")

    if not target_word or not translate_word:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Å /start.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts = data.get('attempts', 0)
    if user_response == target_word:
        cursor.execute("""
        INSERT INTO user_words (user_id, target_word, translate_word)
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id, target_word) DO NOTHING
        """, (message.chat.id, target_word, translate_word))
        conn.commit()

        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n{target_word} => {translate_word}!")
        data.clear()
    else:
        attempts += 1
        data['attempts'] = attempts
        if attempts < 3:
            bot.send_message(
                message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\n–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {translate_word}\n"
                                 f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ 3."
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏.\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {target_word}"
            )
            data.clear()


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(timeout=10, long_polling_timeout=5, skip_pending=True)
